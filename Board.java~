/**@author: Polina Soshnin 
 *FILENAME: Board.java
 *WHAT: CS230 Final Project Phase 2
 *WHEN: November 27, 2012
 *MODIFIED: November 27, 2012
 *PURPOSE: new class to store information about a complete game,
 *create GUI to display the progress of the tournament, and simulate
 *the player of manacala moves
 *
 */
import java.io.*;    
import java.util.*;  
import java.net.*; 
import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Board extends JApplet implements ActionListener {

    //instance variables
    private LinkedList<String> gameList; //manacala board of piles
    private JLabel[] pileLabelArray; //labels for the GUI display
    private JLabel gameStatus; //status of game (who's turn it is)
    private JButton startButton;
    private JButton quitButton;
    private JButton[] pileJButtons; //buttons for the piles/mancala 
    private JPanel buttonPanel; //panels for the GUI display
    private JTabbedPane rulePane; //tab to display rules 
    private JPanel tabPanel;
    private JPanel p1, p2, p3, p4, p5, p6, p7, p8;
    private JPanel borderPanel;
    private JPanel picPanel; //panel that contains image
    private JLabel picLabel; //label for image 
    private ImageIcon redApp; //test image 
    
    /**
     *Constructs the components of a board GUI
     */
    public Board (){
      
 makeLabels();
 makeButtons();
 makePanels();
 redApp= new ImageIcon("Red_Apple.jpg");
 //picPanel= makePicturePanel(redApp);
 
 // makeTabs();

 //need to also initialize LinkedlIist
    }

    /**
     *Initializes the components of the GUI
     */

    public void init() {

 //adds panels to the Applet display
 setLayout(new GridLayout(1,5,8,4));
 //add JPanels here;
      //setLayout(new BorderLayout(4,4));
      //add(p1, BorderLayout.WEST);
 //add(borderPanel);
 add(p1);
 add(p2);
 add(p3);
 add(p4);
 add(p5);
 add(p6);
 add(p7);
 add(p8);
 
 //add(buttonPanel);
 //add(rulePane);
//add the rest of the JPanels 
    }

    /**
     *Method to create tabs to display game rules
     */

    public void makeTabs(){
 rulePane= new JTabbedPane();
 //rulePane.addChangeListener(this);
 JComponent panel1= makeTextPanel("The rules go here");
 JComponent panel2= makeTextPanel("The game goes here");

 rulePane.setTabComponentAt(0, new JLabel("Rules"));
 rulePane.addTab("Rules", panel1);
 rulePane.addTab("Game", panel2);

 //add(rulePane);
 

 //I want to add the tabbed pane 
 //add(rulePane);
    }

    /**
     *Method to create text panel to display game rules
     */

    public JComponent makeTextPanel(String text){
 JPanel panel= new JPanel(false);
 JLabel filler= new JLabel(text);
 filler.setHorizontalAlignment(JLabel.CENTER);
 panel.setLayout(new GridLayout(1,1));
 panel.add(filler);
 return panel;

    }

    /**
     *Method to create an array to store the manacala board 
     *labels that appear on the GUI display
     *(is this the best way to organize all of the labels?)
     */
    
    public void makeLabels() {
 //Use the piles linkedlist from the Game class
 //to populate a label array
 pileLabelArray= new JLabel[14]; //for the 14 slots in the mancala board
 for(int i=0; i<14; i++){
   pileLabelArray[i]= new JLabel();
   pileLabelArray[i].setOpaque(true);
   pileLabelArray[i].setBackground(Color.white);
 }
 gameStatus= new JLabel("New Game");
 picLabel= new JLabel(redApp); //add image to this 
    }

    /**
     *Method to create buttons
     */ 
    
    public void makeButtons(){
      ImageIcon test= new ImageIcon("Red_Apple.jpg");
pileJButtons= new JButton[14]; //for the 14 buttons on the mancala board
for(int i=0; i<14; i++){
  pileJButtons[i]= new JButton(test); //label each button with a number for now
  pileJButtons[i].addActionListener(this);
}
JPanel test1= new JPanel();
//test.add(picPanel);
//ImageIcon test= new ImageIcon("Red_Apple.jpg");
pileJButtons[0].setIcon(test); //add test panel, but i want to add pic panel
 startButton= new JButton("Start New Game");
 startButton.addActionListener(this);
 quitButton= new JButton("Quit Game");
 quitButton.addActionListener(this);
 //instructionButton= new JButton("How to Play");
 //instructionButton.addActionListener(this);
 //newGameButton= new JButton("New Game");
 //newGameButton.addActionListener(this);
    }

    
    
    private JPanel makePicturePanel(JLabel i){
      //create panel that contains the picture i in a JLabel
      picPanel= new JPanel();
      picPanel.add(i);
      return picPanel;
    }
      
      
    
    /**
     *Method to create panels for GUI
     */ 
    public void makePanels(){
      borderPanel= new JPanel(new BorderLayout());
      borderPanel.add(pileLabelArray[6], BorderLayout.WEST);
      borderPanel.add(pileLabelArray[13], BorderLayout.EAST);
      JPanel greyPanel99= new JPanel();
      borderPanel.add(greyPanel99, BorderLayout.SOUTH);
      
 //tabPanel= new JPanel(); //adds tabs to one panel
 p1= new JPanel(); 
      //left most panel that holds first mancala
 p1.setLayout(new GridLayout(2,1,4,4));
 JPanel greyPanel2= new JPanel();
 //p1.add(greyPanel2);
 p1.add((pileLabelArray[6])); //adds left most mancala
 //p1.add((pileJButtons[6]));
 //p1.add(picPanel);

 
 p2= new JPanel(); //holds 5 and 7
 p2.setLayout(new GridLayout(4,1,4,4));
 JPanel greyPanel1= new JPanel();
 //p2.add(greyPanel1); //blank panel
 
 p2.add((pileJButtons[7]));
 p2.add((pileJButtons[5]));
 //p2.add((pileLabelArray[7]));
 //p2.add((pileLabelArray[5]));

buttonPanel= new JPanel(); //adds my button to one panel
buttonPanel.setLayout(new GridLayout(2,1,4,4));
buttonPanel.add(startButton);
buttonPanel.add(quitButton);
 p2.add(buttonPanel); //start button panel
 
  p3= new JPanel(); //holds 8 and 4
 p3.setLayout(new GridLayout(4,1,4,4));
 JPanel greyPanel3= new JPanel();
  
  p3.add((pileJButtons[8]));
 p3.add((pileJButtons[4]));
 //p3.add((pileLabelArray[8]));
 //p3.add((pileLabelArray[4]));
 JPanel greyPanel4= new JPanel();
 p3.add(greyPanel3); //blank panel
 //p3.add(quitButton); //blank panel
 
   p4= new JPanel(); //holds 9 and 3
 p4.setLayout(new GridLayout(4,1,4,4));
 JPanel greyPanel5= new JPanel();
  
  p4.add((pileJButtons[9]));
 p4.add((pileJButtons[3]));
//p4.add((pileLabelArray[9]));
// p4.add((pileLabelArray[3]));
 JPanel greyPanel6= new JPanel();
 p4.add(greyPanel6); //blank panel
 p4.add(greyPanel5); //blank panel
 
  p5= new JPanel(); //holds 10 and 2
 p5.setLayout(new GridLayout(4,1,4,4));
 JPanel greyPanel7= new JPanel();
 
  p5.add((pileJButtons[10]));
 p5.add((pileJButtons[2]));
 //p5.add((pileLabelArray[10]));
 //p5.add((pileLabelArray[2]));
 JPanel greyPanel8= new JPanel();
 p5.add(greyPanel8); //blank panel
   p5.add(greyPanel7); //blank panel
 
   p6= new JPanel(); //holds 11 and 1
 p6.setLayout(new GridLayout(4,1,4,4));
 JPanel greyPanel9= new JPanel();

  p6.add((pileJButtons[11]));
 p6.add((pileJButtons[1]));
 //p6.add((pileLabelArray[11]));
 //p6.add((pileLabelArray[1]));
 JPanel greyPanel10= new JPanel();
 p6.add(greyPanel10); //blank panel
  p6.add(greyPanel9); //blank panel
 
 p7= new JPanel(); //holds 12 and zero
 p7.setLayout(new GridLayout(4,1,4,4));
 JPanel greyPanel11=new JPanel();

  p7.add((pileJButtons[12]));
 p7.add((pileJButtons[0]));
 //p7.add(pileLabelArray[12]);
 //p7.add(pileLabelArray[0]);
 JPanel greyPanel12= new JPanel();
 p7.add(greyPanel12); //blank panel
  p7.add(greyPanel11); //blank panel
 
 
  p8= new JPanel(); 
      //left most panel that holds first mancala
 p8.setLayout(new GridLayout(2,1,4,4));
 // JPanel greyPanel13= new JPanel();
 //p8.add(greyPanel13); //blank panel
 //JPanel greyPanel98= new JPanel();
 //p8.add(greyPanel98, BorderLayout.SOUTH);
 p8.add((pileLabelArray[13])); //adds right most mancala
 

    }

    //initialize GUI display to start a new game
    //all piles will automatically have 4 pieces in them
    /**
     *Calls constructor in Game class to 
     *initialize a Game that will populate 
     */
    private void startNewGame(){

    }

    /**
     *@param ActionEvent event
     *Will perform the methods taken from Game class
     *when the pile buttons are clicked on

    */
    public void actionPerformed(ActionEvent event){
 //handles events generated by Button clicks
 Object source= event.getSource();
 if(source.equals(startButton))
     startNewGame();
 else if (source.equals(quitButton))
     System.exit(0);
    }

}